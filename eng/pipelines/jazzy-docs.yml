# Jazzy Docs Pipeline
resources:
  repositories:
  - repository: internal_tools_acs-mobile-ui
    type: git
    name: SCC/internal_tools_acs-mobile-ui
    ref: feature/add-jazzy-function-app

# Manual runs only
trigger: none

parameters:
  - name: TargetProject
    type: string
    values:
      - AzureCommunicationUICalling
      - AzureCommunicationUIChat
    default: 'AzureCommunicationUIChat'

pool:
    name: vsts-mac-1231-xcode-1331
    demands: xcode

jobs:
  - job: BuildDeployJazzy
    displayName: "Build and Deploy Jazzy Docs"
    steps:
    # 1. environment set up - install nodejs
      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '6.x'
    # 2. clone repos (data source)
      - checkout: internal_tools_acs-mobile-ui
        path: internal_tools_acs-mobile-ui
      - checkout: self
        path: communication-ui-library-ios
    # 3. generate Jazzy docs and replace it in fucntion app  
      # - task: UseRubyVersion@0
      #   inputs:
      #     versionSpec: '>= 1.0'
      # - script: |
      #     gem install jazzy
      #   displayName: "Install Jazzy Gem"
      # - script: |
      #    JAZZY_CONFIG_FILE=$(system.defaultWorkingDirectory)/eng/jazzy/${{ variables['TargetProject'] }}.yml
      #    jazzy --config $JAZZY_CONFIG_FILE
      #    displayName: "Run Jazzy on $(TargetProject)"
      #    workingDirectory: AzureCommunicationUI/sdk/${{ variables['TargetProject'] }}

    # 4. build the function app and prepare for deployment 
      - bash: |
          ls 
          echo "-----"
          cd $(Pipeline.Workspace)/internal_tools_acs-mobile-ui-1/acs_ui_api_doc_jazzy
          echo "-----"
          ls
          npm install typescript
          if [ -f extensions.csproj ]
          then
              dotnet build extensions.csproj --output ./bin
          fi
          npm install 
          npm run build --if-present
          npm prune --production
    # 5. update root endpoint to api/sdk so traffic can be routed properly
      - bash: |
          echo "$(Pipeline.Workspace)/internal_tools_acs-mobile-ui-1/acs_ui_api_doc_jazzy/${{ parameters.TargetProject}}"
          cd $(Pipeline.Workspace)/internal_tools_acs-mobile-ui-1/acs_ui_api_doc_jazzy
          echo "starting endpoint update...."
          ls
          sh ./endpoint-update.sh "${{ parameters.TargetProject}}"
          echo "----------"
          echo "done!"
    # 6. Archive function app
      - task: ArchiveFiles@2
        displayName: "Archive files"
        inputs:
          rootFolderOrFile: "$(Pipeline.Workspace)/internal_tools_acs-mobile-ui-1/acs_ui_api_doc_jazzy"
          includeRootFolder: false
          archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
    # 7. publish the artifacts of the function app
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
          artifactName: 'drop'
    # 8. deploy to azure resource group
      - task: AzureFunctionApp@1 
        inputs:
          azureSubscription: $(ado)
          appType: functionAppLinux # default is functionApp
          appName: john-jazzy-test
          package: $(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip
    # 9. done
      - bash: |
          echo "------"
          echo "Check doc at http://john-jazzy-test.azurewebsites.net/api/${{ parameters.TargetProject}}"
          echo "------"
